import { Squircle } from '../ultimate-squircle/squircle-js';
import styles from './MessageInput.module.css';
import { useState , useRef, useEffect, use } from 'react';
//import { useState} from "react";

import AttachmentIcon from "../../assets/Attachment_Icon_React.svg";
import EmojiIcon from "../../assets/Emoji_Icon_React.svg";

import FileUploader from '../FileUploader/FileUploader';
import EmojiPicker from '../EmojiPicker/EmojiPicker';

import { FileUploaderHandle } from '../FileUploader/FileUploader';

type MessageInputProps = {
  addMessage: (text: string, files: File[]) => void;
  ref: React.RefObject<HTMLDivElement | null>;
  droppedFiles?: File[];
};

const MessageInput = ({ addMessage, ref, droppedFiles }: MessageInputProps) => {
  const [message, setMessage] = useState('');
  const [ShowUploadButton, setShowUploadButton] = useState(false);
  const [showEmojiPicker, setShowEmojiPicker] = useState(false);

  
  const handleSend = () => {
    const text = message.trim();
    // –õ–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    const files = uploaderRef.current?.getFiles() || [];
    console.log(`MessageInput.tsx\nhandleSend()\ntext: ${text}\nfiles: ${files}`);
    if (text || files.length > 0){
      console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è:', text, files);
      addMessage(text, files); // –ú–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å payload, –µ—Å–ª–∏ addMessage –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –æ–±—ä–µ–∫—Ç
      
      setMessage('');
      uploaderRef.current?.clearFiles?.();
      // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–æ–∫
      //addMessage(message.trim());
      //console.log(message.trim())
      //setMessage('');
    }
  };

  
  const uploaderRef = useRef<FileUploaderHandle>(null);

  const MessageInputRef = useRef<HTMLDivElement>(null);
  const [MessageInputSize, setMessageInputSize] = useState({ width: 0, height: 0 });

  const squircleRef = useRef<any>(null);
                  

  useEffect(() => {
    const observer = new ResizeObserver(([entry]) => {
      if (entry) {
        const { width, height } = entry.contentRect;
        setMessageInputSize({ width, height });
      }
    });

    if (MessageInputRef.current) {
      observer.observe(MessageInputRef.current);
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã —á–µ—Ä–µ–∑ getBoundingClientRect
      const { width, height } = MessageInputRef.current.getBoundingClientRect();
      setMessageInputSize({ width, height });
    }

    if (squircleRef.current) {
      console.log(`useEffect: squircleRef.current.forceUpdateClipPath()`)
      squircleRef.current.forceUpdateClipPath();
    } 

    return () => {
      if (MessageInputRef.current) observer.unobserve(MessageInputRef.current);
    };
  }, [ShowUploadButton, droppedFiles, uploaderRef.current?.getFiles()?.length]);


  const handleEmojiSelect = (emoji: string) => {
    setMessage(prev => prev + emoji);
    setShowEmojiPicker(false);
  };

  return (
    
    <div ref={ref} className={styles.inputContainerMain}>
    <Squircle 
      //cornerRadius={20}
      topLeftCornerRadius={20}//–õ–µ–≤—ã–π –≤–µ—Ä—Ö–Ω–∏–π
      topRightCornerRadius={20}//–ü—Ä–∞–≤—ã–π –≤–µ—Ä—Ö–Ω–∏–π
      bottomLeftCornerRadius={0}//–õ–µ–≤—ã–π –Ω–∏–∂–Ω–∏–π
      bottomRightCornerRadius={0}//–ü—Ä–∞–≤—ã–π –Ω–∏–∂–Ω–∏–π

      ref={squircleRef}

      cornerSmoothing={1}
      //defaultWidth={800} //—à–∏—Ä–∏–Ω–∞ —Ç–µ—Ä–µ—Ä—å —Ä–µ–≥—É–ª–∏—Ä—É–µ—Ç—Å—è –∫–æ–¥–æ–º —Å–≤–µ—Ä—Ö—É
      //defaultHeight={60}
      className={styles.inputContainer}
      style={{
        //minWidth: "392px",//400 - 8, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω—ã –¥–ª—è –æ—Ç—Å—Ç—É–ø–∞ –¥–ª—è —Å–∫—Ä–æ–ª–ª–±–∞—Ä–∞ (–º–æ–∂–Ω–æ –≤ –ø—Ä–∏–Ω—Ü–∏–ø–µ –Ω–µ —É–∫–∞–∑—ã–≤–∞—Ç—å(—Ä–µ–≥—É–ª–∏—Ä—É–µ—Ç—Å—è –≤ —Å—Ç–∏–ª—è—Ö —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞(ChatWindow), –∞ –æ—Ç—Å—Ç—É–ø —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤ —Å—Ç–∏–ª—è—Ö —Ç–µ–∫—É—â–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞))
        minHeight: '60px',
        maxHeight: '880px',
        width: `${MessageInputSize.width}px`,
        //height: `60px`,
        //height: `${MessageInputSize.height}px`,
        height: `${MessageInputSize.height}px`,
        //height: `fit-content`,
      }}
    >
      {ShowUploadButton ? <FileUploader ref={uploaderRef} squircleRef={squircleRef} className={styles.FileUploaderShow} externalFiles={droppedFiles}/> 
      : <FileUploader ref={uploaderRef} squircleRef={squircleRef} className={styles.FileUploaderHidden} externalFiles={droppedFiles}/>}
      

      <div className={styles.inputWrapper}>
        {/*<button className={styles.attachmentBtn} onClick={() => console.log('Attach file')}>
          üìé
        </button>*/}

        {/*@ts-ignore*/} {/*–í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–∫–∏ (–¥–ª—è —Å–±–æ—Ä–∫–∏)*/}
        <AttachmentIcon className={styles.attachmentBtn} width={30} height={30} color="#1A1A1A" 
        onClick={() => {
          setShowUploadButton(prev => !prev)//–∏–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
          squircleRef.current?.forceUpdateClipPath();
          console.log('Attachment')}}
          />
        <input
          type="text"
          placeholder="–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..."
          className={styles.input}
          value={message}
          onChange={(e) => setMessage(e.target.value)}
          onKeyDown={(e) => e.key === 'Enter' && handleSend()}
        />
        {/*<button className={styles.emojiBtn}>üòä</button>*/}

        {/*@ts-ignore*/} {/*–í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–∫–∏ (–¥–ª—è —Å–±–æ—Ä–∫–∏)*/}
        <EmojiIcon className={styles.emojiBtn} width={30} height={30} color="#1A1A1A" onClick={() => {
          setShowEmojiPicker(prev => !prev)  
          console.log('Emoji')}}
        />

        

        <button 
          className={styles.sendBtn}
          onClick={handleSend} 
          //disabled={!message.trim()} //–ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—É—Å—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ —Ñ—É–Ω–∫—Ü–∏–∏ handleSend()
        >‚ûö</button>
      </div>
    </Squircle>

    <EmojiPicker
          visible={showEmojiPicker}
          onSelect={handleEmojiSelect}
          onClose={() => setShowEmojiPicker(false)}
        />
    </div>
  );
};

export default MessageInput;